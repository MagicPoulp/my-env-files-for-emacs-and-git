package co.frog.pokedex

import androidx.lifecycle.Lifecycle
import androidx.lifecycle.lifecycleScope
import androidx.lifecycle.repeatOnLifecycle
import androidx.lifecycle.testing.TestLifecycleOwner
import co.frog.pokedex.data.repositories.PokemonDataRepository
import co.frog.pokedex.data.structures.PokemonDetails
import co.frog.pokedex.data.structures.ResultOf
import co.frog.pokedex.data.structures.api.NamedAPIResource
import co.frog.pokedex.data.structures.api.NamedAPIResourceList
import co.frog.pokedex.domain.ExtractPokemonDetailsUseCase
import co.frog.pokedex.ui.PokedexViewModel
import dagger.hilt.android.testing.HiltAndroidTest
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.launch
import kotlinx.coroutines.test.*
import org.hamcrest.CoreMatchers.equalTo
import org.hamcrest.MatcherAssert.assertThat
import org.junit.jupiter.api.AfterEach
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.mockito.kotlin.doReturn
import org.mockito.kotlin.mock

@HiltAndroidTest
class PokedexViewModelUnitTest {

    lateinit var pokeViewModel: PokedexViewModel

    private fun getDummyPokemonList(): NamedAPIResourceList {
        val results = listOf(
            NamedAPIResource(
                name = "Pok√©mon1",
                url = "https://pokeapi.co/api/v2/pokemon/1/",
            )
        )
        return NamedAPIResourceList(
            count = results.size,
            next = null,
            previous = null,
            results = results,
        )
    }

    private val testingPokemonList = getDummyPokemonList()

    @OptIn(ExperimentalCoroutinesApi::class)
    @BeforeEach
    fun beforeEach() {
        // https://github.com/Kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-test/MIGRATION.md
        // this dispatcher skips delays
        Dispatchers.setMain(UnconfinedTestDispatcher())
        //Dispatchers.setMain(StandardTestDispatcher())
        val pokemonDataRepository = mock<PokemonDataRepository>() {
            onBlocking { getPokemon() } doReturn testingPokemonList
        }
        val extractPokemonDetailsUseCase = mock<ExtractPokemonDetailsUseCase>()
        pokeViewModel = PokedexViewModel(pokemonDataRepository, extractPokemonDetailsUseCase)
    }

    @OptIn(ExperimentalCoroutinesApi::class)
    @AfterEach
    fun afterEach() {
        Dispatchers.resetMain()
    }

    @OptIn(ExperimentalCoroutinesApi::class)
    @Test
    fun testGetPokemon() = runTest {
        val actual = mutableListOf<ResultOf<List<PokemonDetails>>>()
        val testLifecycleOwner = TestLifecycleOwner()
        testLifecycleOwner.lifecycleScope.launch {
            testLifecycleOwner.lifecycle.repeatOnLifecycle(Lifecycle.State.STARTED) {
                pokeViewModel.pokemonList.collect {
                    actual.add(it)
                }
            }
        }
        testLifecycleOwner.currentState = Lifecycle.State.CREATED
        testLifecycleOwner.currentState = Lifecycle.State.STARTED
        assertThat("number of values", actual.size, equalTo(2))
    }
}


--------
lt-android-testing:2.44.2")
    kaptAndroidTest("com.google.dagger:hilt-compiler:2.44.2")
        // For local unit tests
            testImplementation("com.google.dagger:hilt-android-testing:2.44.2")
                kaptTest("com.google.dagger:hilt-compiler:2.44.2")

    //test libs
        // Kotlin extensions for androidx.test.core
            // implementation("androidx.core:core-ktx:1.9.0")
                // Kotlin extensions for androidx.test.ext.junit
                    //implementation("androidx.test.ext:junit-ktx:1.1.4")

    // mockito
        testImplementation("org.mockito.kotlin:mockito-kotlin:4.1.0")
            testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.4")
                testImplementation("org.mockito:mockito-inline:4.11.0")
                    // testImplementation("org.hamcrest:hamcrest:2.2") // already loaded
                        testImplementation("androidx.lifecycle:lifecycle-runtime-testing:2.5.1")

    // for JUnit 5 extensions
        // https://www.baeldung.com/mockito-junit-5-extension
            //testImplementation "org.mockito:mockito-junit-jupiter:4.6.1"
                //testImplementation("org.junit.jupiter:junit-jupiter-api:5.8.2")
                    //testImplementation("org.junit.jupiter:junit-jupiter-params:5.8.2")

    // temporary dir
        // https://www.baeldung.com/junit-5-temporary-directory

    // we use JUnit 5
        testImplementation("org.junit.jupiter:junit-jupiter:5.9.1")
            testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.9.1")
                //testRuntimeOnly("org.junit.vintage:junit-vintage-engine:5.8.2")

    // mockk has every ... getProperty
        //testImplementation "io.mockk:mockk-android:1.13.1"
            //testImplementation "io.mockk:mockk-agent:1.13.1"
            }~